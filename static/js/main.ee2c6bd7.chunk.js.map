{"version":3,"sources":["Count.js","App.js","reportWebVitals.js","index.js"],"names":["connect","props","count","console","log","style","textAlign","onClick","dispatch","type","App","store","createStore","state","action","Count","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8KAoBE,IAGaA,eAHW,SAACC,GAAD,MAAY,CAClCC,MAAOD,EAAMC,SAEFF,EApBf,SAAiBC,GAUb,OATAE,QAAQC,IAAIH,EAAMC,OAUd,sBAAKG,MAAO,CAAEC,UAAW,UAAzB,UACI,wBAAQC,QAVhB,WACIN,EAAMO,SAAS,CAAEC,KAAM,gBASnB,eACA,6BAAKR,EAAMC,QACX,wBAAQK,QAThB,WACQN,EAAMC,OACND,EAAMO,SAAS,CAAEC,KAAM,gBAOvB,qB,OCuCG,SAASC,IAsBtB,IAAMC,EAAQC,aAnBd,SAAiBC,EAAOC,GAEtB,OAAQA,EAAOL,MACb,IAAK,aACH,MAAO,CACLP,MAAOW,EAAMX,MAAQ,GAEzB,IAAK,aACH,MAAO,CACLA,MAAOW,EAAMX,MAAQ,GAEzB,QACE,MAAO,CACLA,MAAO,OASf,OAFAC,QAAQC,IAAI,QAASO,GAGnB,cAAC,IAAD,CAAUA,MAAOA,EAAjB,SACE,cAACI,EAAD,MCnFN,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OAEP,cAAChB,EAAD,IAEAiB,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee2c6bd7.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { connect } from 'react-redux';\n\nfunction Countss(props) {\n    console.log(props.count);\n    function incerement() {\n        props.dispatch({ type: \"inecrement\" })\n    }\n    function decerement() {\n        if (props.count) {\n            props.dispatch({ type: \"dnecrement\" })\n        }\n    }\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <button onClick={incerement}>+</button>\n            <h1>{props.count}</h1>\n            <button onClick={decerement}>-</button>\n        </div>\n    )\n} const mapStateToProps = (props) => ({\n    count: props.count\n})\nexport default connect(mapStateToProps)(Countss);","// import React, { useState } from 'react'\n// import './App.css';\n// function App() {\n//   const [id, setID] = useState(null)\n//   const [todo, setTodo] = useState()\n//   const [addTodo, setAddTodo] = useState([])\n//   function submitTodo() {\n//     setTodo(\"\")\n//     setAddTodo([...addTodo, todo])\n//   }\n//   function deleteTodo(i) {\n//     setAddTodo(addTodo.filter((item, index) => index !== i))\n//   }\n//   function editTodo(index, item) {\n//     setID(index)\n//     setTodo(item)\n//   }\n//   function editData() {\n//     addTodo[id] = todo\n//     setAddTodo([...addTodo]);\n//     setID(null)\n//     setTodo(\"\")\n//   }\n//   console.log(process.env.Hello, \"env\");\n//   return (\n//     <div className=\"container\">\n//       <div className=\"row mt-5\">\n//         <div className=\"col-md-10 pr-0\">\n//           <input type=\"text\" className=\"form-control\" value={todo} onChange={e => setTodo([e.target.value])} placeholder=\"Enter Value\" />\n//         </div>\n//         <div className=\"col-md-2  pl-1\">\n//           <button className=\"btn btn-primary\" onClick={() => id == null ? submitTodo() : editData()} >{id === null ? \"add\" : \"edit\"}</button>\n\n//         </div>\n//         <div className=\"col-md-11 mt-5\">\n//           <table className=\"table table-bordered\">\n//             {addTodo.length > 0 && addTodo.map((item, index) => (\n//               <tr key={index}> <td width=\"100\">{index}</td><td>{item}</td><td width=\"170\"> <button className=\"btn btn-outline-danger\" onClick={() => deleteTodo(index)}>Delete</button> <button className=\"btn btn-outline-info\" onClick={() => editTodo(index, item)}>Edit</button></td></tr>))}\n//           </table>\n//         </div>\n\n//       </div>\n\n//     </div>\n//   );\n// }\n\n\n// export default App;\n\n\nimport React, { useEffect } from 'react'\nimport Countss from './Count'\nimport { createStore } from 'redux'\nimport { Provider } from \"react-redux\"\n\nexport default function App() {\n\n\n  function reducer(state, action) {\n\n    switch (action.type) {\n      case \"inecrement\":\n        return {\n          count: state.count + 1\n        };\n      case \"dnecrement\":\n        return {\n          count: state.count - 1\n        }\n      default:\n        return {\n          count: 0\n        }\n    }\n\n  }\n\n  const store = createStore(reducer);\n  console.log(\"store\", store);\n\n  return (\n    <Provider store={store}>\n      <Countss />\n    </Provider>\n\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n\n\nReactDOM.render(\n\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}